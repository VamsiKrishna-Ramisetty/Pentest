import argparse
import socket
from datetime import datetime
import sys
from colorama import Fore as F,Back as B,Style as S

BB,BR,FT,FR,FG,FY,FB,FM,FC,ST,SD,SB = B.BLACK,B.RED,F.RESET,F.RED,F.GREEN,F.YELLOW,F.BLUE,F.MAGENTA,F.CYAN,S.RESET_ALL,S.DIM,S.BRIGHT

open_ports=[]

def main():
    
    print(SB,end="")
    print(FG,end="")
    
    ports_to_scan=[]
    
    parser = argparse.ArgumentParser()
    parser.add_argument("-t",help="Target",type=str)
    parser.add_argument("-p",help="Ports to scan Ex : -p- or -p 1-100 or -p 21,22,25")
    parser.add_argument("-v",help="Verbose Mode",action="store_true")
    parser.add_argument("-q",help="Quite banner",action="store_true")
    args=parser.parse_args()
    
    if(args.t):
        target=args.t
        ports=args.p
        verbose=args.v
    else:
        print("[-] Missing Parmeters Usage python3 tcp_port_scanner.py -h")
        sys.exit(0)
    
    if(args.q):
        print("",end="")
    else:
        signature()
 
    print("[*] TCP Port Scanner with Python")
    print("[+] Target Server : "+target)
    
    if(ports=='-' or ports==' - ' or ports == ' -'):
            
            print("[+] Ports : 1-65536")
            
            for p in range (1,65536):
                ports_to_scan.append(p)
    else:
            print("[+] Ports : "+ports)
            
            if "," in ports:
                    ports_to_scan=ports.split(",")
                    
            if "-" in ports:
                    ports_tmp=ports.split("-")
                    first_port=int(ports_tmp[0])
                    last_port=int(ports_tmp[1])+1
                    
                    for i in range(first_port,last_port):
                            ports_to_scan.append(str(i))

            
    if(verbose):
        print("[+] Verbose Mode : ON")
    else:
        print("[+] Verbose Mode : OFF")
    
    
    print("[*] Scanning started at : " + str(datetime.now()))

    for port in ports_to_scan:
            
            port_scan(target,int(port),verbose)
    
    if(len(open_ports)==0):
        print("[-] No Open Ports Found ")
        sys.exit(0)
    else:
        print("\n[*] Open Ports : ")
        print("\n[+] Port    Prot    State\n")
        for temp in open_ports:
                
                i=int(temp)
                
                if i <=9:
                    print("[+] "+str(i)+"       TCP     OPEN")
                elif i >=10 and  i<=99:
                    print("[+] "+str(i)+"      TCP     OPEN")
                elif i >=100 and i<=999:
                    print("[+] "+str(i)+"     TCP     OPEN")
                elif i>=1000 and i<=9999:
                    print("[+] "+str(i)+"    TCP     OPEN")
                else:
                    print("[+] "+str(i)+"   TCP     OPEN")

def port_scan(target,port,verbose):

            try:
                    target_ip=socket.gethostbyname(target)
                    if(verbose):
                        print("[+] Scanning Port : "+str(port))

                    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
                    socket.setdefaulttimeout(1)
                    if(port<65536):
                        state=s.connect_ex((target_ip,port))
                    else:
                        print("[-] Invalid Port Skipping : "+str(port))
                    if(state==0):
                        print("[+] Port : "+str(port)+" Opened")
                    s.close()
                    open_ports.append(port)

            except KeyboardInterrupt:
                    print("[-] Quitting the Program")
                    sys.exit()
            except socket.gaierror:
                    print("[-] Not able to Resolve Hostname")
                    sys.exit()
            
            except socket.error:
                    print("[-] Not able to Connect to the Server ")
                    sys.exit()

def signature():
    header = "\n"+SB+FT+''+FR+'* * * * * * * * Vamsikrishna '+FR+'"'+FT+'V3GETA'+FR+'"'+FR+' Ramisetty * * * * * * * *\n'+ST
    print(header)
    SIG =""
    SIG+=FR+"     ██    ██ "+FT+"██████"+FY+"   ██████"+FT+"  ███████"+FB+" ████████"+FG+"  █████\n"
    SIG+=FR+"     ██    ██ "+FT+"     ██"+FY+" ██       "+FT+"██        "+FB+" ██"+FG+"    ██   ██ \n"
    SIG+=FR+"     ██    ██ "+FT+" █████"+FY+"  ██   ███"+FT+" █████   "+FB+"   ██"+FG+"    ███████ \n"
    SIG+=FR+"      ██  ██  "+FT+"     ██"+FY+" ██    ██"+FT+" ██        "+FB+" ██"+FG+"    ██   ██ \n"
    SIG+=FR+"       ████   "+FT+"██████"+FY+"   ██████"+FT+"  ███████ "+FB+"   ██"+FG+"    ██   ██ \n"
    SIG+="\n"
    SIG+=SB+""+FY+"      _______"+FR+"github.com/VamsiKrishna-Ramisetty"+FY+"_______\n"
    SIG+=FR+"\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n" 
    print(SIG)
    print(FG,end="")

if __name__ == '__main__':
    main()

